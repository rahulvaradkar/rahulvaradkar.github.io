---
swagger: "2.0"
info:
  description: Boardwalk Rest API
  version: 1.0.2
  title: Boardwalk Cuboid Services
  contact:
    name: API Support
    url: http://www.boardwalktech.com/support
    email: apisupport@boardwalltech.com
host: api.boardwalktech.com
basePath: /v2
tags:
- name: user
  description: User Management operations
- name: neighborhood
  description: User groups, memberships
- name: nhpath
  description: nhpath
- name: collaboration
  description: Expresses enterprise intent
- name: grid
  description: Sequences and positions cells
- name: gridchain
  description: Blockchain of Grids
schemes:
- https
produces:
- application/json
security:
- bwAuth: []
paths:
  /user:
    get:
      tags:
      - user
      summary: Get all users in the system
      description: Gets all users in the system, can be filtered by active/inactive users
      parameters:
      - name: active
        in: query
        required: false
        type: boolean
      responses:
        200:
          description: successful operation. Existing userlist with matching activeflag
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Error fetching User List
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    post:
      tags:
      - user
      summary: Create new user
      parameters:
      - in: body
        name: user
        description: User creation details
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid input
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: Failed to update user profile for UserId. Reason could be trying to create Duplicate entities
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    put:
      tags:
      - user
      summary: Update user profile
      parameters:
      - in: body
        name: user
        description: User creation details
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
          schema:
            type: string
            example: User Profile updated successfully
        400:
          description: Invalid input
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: Failed to update user profile for UserId. Reason could be trying to create Duplicate entities
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get a specific user profile from the systems
      parameters:
      - name: userId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid input
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: User not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    delete:
      tags:
      - user
      summary: De-activate user by ID
      parameters:
      - name: userId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: string
            example: User de-activated successfully
        400:
          description: Invalid input
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: User not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /user/memberships:
    get:
      tags:
      - user
      summary: Get all user memberships in the system
      description: Gets all user memberships in the system. User can Get only his/her memberships details. So {email} and user in Authrization must match.
      parameters:
      - name: email
        in: path
        required: true
        type: string
      responses:
        200:
          description: successful operation. Returns user memberships
          schema:
            type: array
            items:
              $ref: '#/definitions/Membership'
        400:
          description: Invalid input. Null or missing email
          schema:
            type: array
            items:
              $ref: '#/definitions/ResponseInfo'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ResponseInfo'
        403:
          description: server understood the request but refuses to authorize it.
          schema:
            type: array
            items:
              $ref: '#/definitions/ResponseInfo'
  /collaboration/{collabId}/whiteboard/{whiteboardId}/grids:
    get:
      tags:
      - collaboration
      summary: Get the list of all Grids present in the Whiteboard of the Collaboration in Neighborhood that user can access using his/her Neighborhood memberships.
      description: User can GET the list of Grids present in the Whiteboard of the Collaboration using his/her memberships details for that Neighborhood.
      parameters:
      - name: collabId
        in: path
        required: true
        type: integer
      - name: whiteboardId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/GridInfo'
        400:
          description: Invalid input. Null or missing collabId, wbId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: CollabId or WhiteboardId Not found.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /collaboration/{collabId}/grids:
    get:
      tags:
      - collaboration
      summary: Get the list of all Grids present in the Whiteboard of the Collaboration in Neighborhood that user can access using his/her Neighborhood memberships.
      description: User can GET the list of Grids present in the Whiteboard of the Collaboration using his/her memberships details for that Neighborhood.
      parameters:
      - name: collabId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/GridInfo'
        400:
          description: Invalid input. Null or missing collabId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: CollabId Not found.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /gridchain/{gridId}:
    get:
      tags:
      - gridchain
      summary: Get a section or the full grid based on specification
      description: User can GET all Grid Component, it's status, History, Transactions done on entire grid. Information of the Grid present in the Whiteboard of the Collaboration using his/her memberships details for that Neighborhood. So {email} and user in Authrization must match. Also {nhPath} and nhPath in Authorization should match. The Grid information will have Column Names, sequence Number, Active/inactive & Access Control ( R/W ), Column Count, Row Count, Access Control for Add Row, Delete Row, Insert Column, Delete Column, Edit Data, Cuboid Properties. If user is the Owner then Accesss Control Cuboid information.
      parameters:
      - name: gridId
        in: path
        required: true
        type: integer
      - name: activityPeriod
        in: query
        required: false
        type: string
      - name: startDate
        in: query
        required: false
        type: integer
        format: int64
      - name: endDate
        in: query
        required: false
        type: integer
        format: int64
      - name: localTimeAfter_1_11970
        in: query
        required: false
        type: integer
        format: int64
      - name: startTxId
        in: query
        required: false
        type: integer
      - name: endTxId
        in: query
        required: false
        type: integer
      - name: viewPref
        in: query
        required: true
        type: string
      - name: chainWindow
        in: query
        required: true
        type: string
      - name: filter
        in: query
        required: false
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/GridChain'
        400:
          description: Invalid input. Negative gridId, Null importTxId, view, baseline, mode, mode != 1 or 0
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        403:
          description: Forbidden. User don't have the privileges to execute this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: GridId Not Found. Provide an existing Grid Id.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Server error - getTableBuffer or getTableInfo or getCriteriaTable | StartTransaction | BW_IMPORT_CHANGES | getXlColumnsForImport | RowManager.getTableRows
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    put:
      tags:
      - gridchain
      summary: Submit Changes in GridChain. Also Returns GET GridChain BETWEENTX in response.
      description: User submit Changes to Server as CellBuffer along with the ImportTxId. User Changes are saved to Database on Server and current ExportTxId is generated. In response GridChain is returned that has all Grid changes done between ImportTxId and current ExportTxId. The GridChain includes all changed cells, it's status, History, Transactions done on entire grid between the ImportTxId and the Current ExportTxId.
      parameters:
      - name: gridId
        in: path
        required: true
        type: integer
      - in: body
        name: CellBufferRequest
        description: Cell buffer details
        required: true
        schema:
          $ref: '#/definitions/CellBuffer'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/GridChain'
        400:
          description: Invalid input. Negative gridId, Null importTxId, view, baseline, mode, mode != 1 or 0
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        403:
          description: Forbidden. User don't have the privileges to execute this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Server error - getTableBuffer or getTableInfo or getCriteriaTable | StartTransaction | BW_IMPORT_CHANGES | getXlColumnsForImport | RowManager.getTableRows
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /neighborhood:
    get:
      tags:
      - neighborhood
      summary: Get an aaray of neighborhoods
      parameters:
      - name: neighborhoodSpec
        in: query
        description: regular expression of upto four level neighborhood hierarchy
        required: false
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Neighborhood'
    post:
      tags:
      - neighborhood
      summary: Creates a new neighborhood
      parameters:
      - in: body
        name: Neighborhood
        description: Neighborhood creation detail
        required: true
        schema:
          $ref: '#/definitions/Neighborhood'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Neighborhood'
        400:
          description: Invalid input. missing nhName, Negative parentNhId.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Parent NeighborhoodId not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: NhName must be Unique under a parent.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /neighborhood/{nhId}:
    get:
      tags:
      - neighborhood
      summary: Get the entire neighborhood heirarchy below this neighborhood
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Neighborhood'
        400:
          description: Invalid input. Negative NhId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Id not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Failed to GET Neighborhood on server
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    delete:
      tags:
      - neighborhood
      summary: Delete neighborhood by ID
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: string
            example: Neighborhood Deleted Successfully. All it's dependent objects are purged successfully.
        400:
          description: Invalid input. Negative NhId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Failed to Delete Neighborhood. BoardwalkException exception occured on server
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /neighborhood/{nhId}/member:
    get:
      tags:
      - neighborhood
      summary: Get list of members for neighborhood
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
        400:
          description: Invalid input. Negative NhId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Id not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Failed to GET Membership details of Neighborhood
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    post:
      tags:
      - neighborhood
      summary: Add a member to neighborhood
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      - in: body
        name: Member
        description: Member creation details
        required: true
        schema:
          $ref: '#/definitions/Member'
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
        400:
          description: Invalid input. Negative or Zero UserId, NhId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Not found. User not Found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Creating new membership to Neighborhood Failed
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /neighborhood/{nhId}/member/{memberId}:
    delete:
      tags:
      - neighborhood
      summary: Delete member from neighborhood
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      - name: memberId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: string
            example: Membership deleted successfully
        400:
          description: Invalid input. Negative NhId, Negative MemberId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Not found. Membership Not Found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Deleting membership of Neighborhood Failed.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /neighborhood/{nhId}/relation:
    get:
      tags:
      - neighborhood
      summary: Get list of relations in a neighborhood
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Relation'
        400:
          description: Invalid input. Negative NhId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Id not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Failed to GET Neighborood Relation of Neighborhood
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    post:
      tags:
      - neighborhood
      summary: Add a custom relation to neighborhood
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      - in: body
        name: Relationship
        description: Relationship creation details
        required: true
        schema:
          $ref: '#/definitions/Relation'
      responses:
        200:
          description: successful operation
          schema:
            type: string
            example: Relation created successfully
        400:
          description: Invalid input. Missing relation Name, Negative nhId, Negative nhIds in related Neighborhoods. Invalid Neighborhoods in NhList.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: Creation of Relation failed
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    delete:
      tags:
      - neighborhood
      summary: Delete all custom relations from neighborhood
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      - name: relation
        in: query
        required: true
        type: string
      responses:
        200:
          description: Successful operation.
          schema:
            type: string
            example: Relation deleted successfully
        400:
          description: Invalid input. Negative NhId, Relation Null or Missing
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Not found. Relation Not Found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Failed to Delete Relation.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /neighborhood/{nhId}/relation/{relation}/Neighborhood:
    get:
      tags:
      - neighborhood
      summary: Get Neighborhood for the specific path.
      description: Returns the Neighborhood for the given path
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      - name: relation
        in: path
        required: true
        type: string
      responses:
        200:
          description: successful operation. A Neighborhood object
          schema:
            type: array
            items:
              $ref: '#/definitions/Neighborhood'
        400:
          description: Invalid input (Null or missing nhPath, email)
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        403:
          description: server understood the request but refuses to authorize it.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /nhpath/{nhpath}:
    get:
      tags:
      - nhPath
      summary: Get an aaray of neighborhoods
      parameters:
      - name: nhpath
        in: path
        description: nhpath
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Neighborhood'
  /neighborhood/{nhId}/collaboration:
    get:
      tags:
      - collaboration
      summary: Get the collaboration heirarchy
      parameters:
      - name: nhId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Collaboration'
        400:
          description: Invalid input. Negative NhId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Neighborhood Id not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Failed to GET Collaborations of Neighborhood from Server
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /collaboration:
    post:
      tags:
      - collaboration
      summary: Create new collaboration
      parameters:
      - in: body
        name: collab
        description: Collaboration creation details
        required: true
        schema:
          $ref: '#/definitions/Collaboration'
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Collaboration'
        400:
          description: Null or missing or empty collabName
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: Collaboration already exists with this name.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /collaboration/{collabId}:
    delete:
      tags:
      - collaboration
      summary: Delete collaboration by ID
      parameters:
      - name: collabId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: string
            example: Collaboration deleted successfully
        400:
          description: Invalid input. Negative CollabId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Collaboration Id Not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /collaboration/{collabId}/whiteboard:
    get:
      tags:
      - collaboration
      summary: Get the whiteboards for a collaboration
      parameters:
      - name: collabId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Whiteboard'
        400:
          description: Invalid input. Negative CollabId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Collaboration Id not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    post:
      tags:
      - collaboration
      summary: Create new Whiteboard
      parameters:
      - name: collabId
        in: path
        required: true
        type: integer
      - in: body
        name: wb
        description: Whiteboard creation details
        required: true
        schema:
          $ref: '#/definitions/Whiteboard'
      responses:
        200:
          description: successful operation. WhiteboardId returned.
          schema:
            type: integer
        400:
          description: Invalid input. Negative collabId. Null or Missing or Empty Whiteboard Name.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Collaboration Id Not found.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: Creating new Whiteboard in Collaboration Failed. Whiteboard already exists.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /collaboration/{collabId}/whiteboard/{whiteboardId}:
    delete:
      tags:
      - collaboration
      summary: Delete whiteboard by ID
      parameters:
      - name: collabId
        in: path
        required: true
        type: integer
      - name: whiteboardId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: string
            example: Whiteboard deleted successfully
        400:
          description: Invalid input. Negative CollabId, Negative WhiteboardId
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: CollabId Not found. Whiteboard Not Found
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /grid/{gridId}:
    get:
      tags:
      - grid
      summary: Download latest grid data for a given cell specification
      description: ""
      parameters:
      - name: gridId
        in: path
        required: true
        type: integer
      - name: importTxId
        in: query
        required: true
        type: integer
      - name: view
        in: query
        required: true
        type: string
      - name: mode
        in: query
        required: true
        type: integer
      - name: baselineId
        in: query
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/CellBuffer'
        400:
          description: Invalid input. Negative gridId, Null importTxId, view, baseline, mode, mode != 1 or 0
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        403:
          description: Forbidden. User don't have the privileges to execute this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: GridId Not Found. Provide an existing Grid Id.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Server error - getTableBuffer or getTableInfo or getCriteriaTable | StartTransaction | BW_IMPORT_CHANGES | getXlColumnsForImport | RowManager.getTableRows
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /grid/{gridId}/columns:
    get:
      tags:
      - grid
      summary: Download grid structure
      description: ""
      parameters:
      - name: gridId
        in: path
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ColumnChain'
        400:
          description: Invalid input. Negative gridId, Null importTxId, view, baseline, mode, mode != 1 or 0
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        403:
          description: Forbidden. User don't have the privileges to execute this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Server error - getTableBuffer or getTableInfo or getCriteriaTable | StartTransaction | BW_IMPORT_CHANGES | getXlColumnsForImport | RowManager.getTableRows
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
  /grid:
    post:
      tags:
      - grid
      summary: Create a new cuboid. returns a new grid id
      parameters:
      - in: body
        name: Grid
        description: Cuboid creation details
        required: true
        schema:
          $ref: '#/definitions/Grid'
      responses:
        200:
          description: successful operation, returns grid with an ID
          schema:
            $ref: '#/definitions/Grid'
        400:
          description: Invalid input. Bad Request Negative or null collabId, wbId. Blank or null gridDesc, gridName.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Collaboration Id not found. Whiteboard Id not found.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: Grid already exists in the Whiteboard.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: Server error. Failed to get Neighborhood Relationships.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    put:
      tags:
      - grid
      summary: Update a grid
      parameters:
      - name: gridId
        in: query
        required: true
        type: integer
      - in: body
        name: CellBufferRequest
        description: Cell buffer details
        required: true
        schema:
          $ref: '#/definitions/CellBuffer'
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/CellBuffer'
        400:
          description: Invalid input. Too many errors in payload
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        403:
          description: User don't have the privileges to execute this action. Add/Delete Row | Administer Columns
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        404:
          description: Missing elements info | cells | rowArray | columnArray | rows | columns | columnCellArrays | GridChangeBuffer - OR -  Blank Column Name - OR - Missing elements info | cells | rowArray | columnArray | rows | columns | columnCellArrays | GridChangeBuffer  - OR - Membership is Not Valid (in validateMembership)
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        409:
          description: Columns are not Unique - OR - Critical updates on Server - OR- Column already exists in the Grid
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        423:
          description: The resource that is being accessed is locked. The table is being updated by another user, Please try later.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
        500:
          description: NhName must be Unique under a parent.
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorRequestObject'
    delete:
      tags:
      - grid
      summary: Delete cuboid by ID
      parameters:
      - name: gridId
        in: path
        required: true
        type: integer
      responses:
        104:
          description: No Permissions to delete this object
          schema:
            $ref: '#/definitions/ErrorRequestObject'
        200:
          description: successful operation
        404:
          description: Cuboid not found
  /gridchain/{gridId}/transactions:
    get:
      tags:
      - gridchain
      summary: Get cuboid transactions for time interval for a given specification
      description: ""
      parameters:
      - name: gridId
        in: path
        required: true
        type: integer
      - name: activityPeriod
        in: query
        required: false
        type: string
      - name: startDate
        in: query
        required: false
        type: integer
        format: int64
      - name: endDate
        in: query
        required: false
        type: integer
        format: int64
      - name: localTimeAfter_1_11970
        in: query
        required: false
        type: integer
        format: int64
      - name: startTxId
        in: query
        required: false
        type: integer
      - name: endTxId
        in: query
        required: false
        type: integer
      - name: importTxId
        in: query
        required: false
        type: integer
      - name: viewPref
        in: query
        required: true
        type: string
      - name: reportType
        in: query
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/GridTransaction'
        400:
          description: Invalid input. Negative GridId. Missing/Negative localTimeAfter111970. Invalid Start and End Dates. Invalid Activity Period. Missing importTxId. Missing/invalid reportType
          schema:
            type: array
            items:
              $ref: '#/definitions/ResponseInfo'
        401:
          description: Invalid Authorization
          schema:
            type: array
            items:
              $ref: '#/definitions/ResponseInfo'
        404:
          description: GridId not found
          schema:
            type: array
            items:
              $ref: '#/definitions/ResponseInfo'
        500:
          description: SQLException in TableManager.getTransactionList - OR - TableManager.getTransactionListAfterImport - OR - SystemException in TableManager.getTableInfo
          schema:
            type: array
            items:
              $ref: '#/definitions/ResponseInfo'
securityDefinitions:
  bwAuth:
    type: basic
definitions:
  ChainWindowEnum:
    type: string
    enum:
    - LATESTTX
    - ALLTX
    - ASOFTX
    - BETWEENTX
  Neighborhood:
    type: object
    properties:
      nhId:
        type: integer
      nhName:
        type: string
      level:
        type: integer
      parentNhId:
        type: integer
      isSecure:
        type: boolean
        format: integer
        default: false
  Transaction:
    type: object
    properties:
      txId:
        type: integer
      userId:
        type: integer
      userEmail:
        type: string
      txTimeUTC:
        type: string
        format: date-time
      comment:
        type: string
      description:
        type: string
  Relation:
    type: object
    properties:
      relationName:
        type: string
      relatedNhId:
        type: array
        items:
          $ref: '#/definitions/Neighborhood'
  User:
    type: object
    properties:
      userId:
        type: integer
      userEmail:
        type: string
      externalUserId:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
  Member:
    type: object
    properties:
      memberId:
        type: integer
      nhId:
        type: integer
      userId:
        type: integer
      isActive:
        type: boolean
        format: true or false
  Membership:
    type: object
    properties:
      userId:
        type: integer
      memberId:
        type: integer
      userEmail:
        type: string
      nhId:
        type: integer
      nhName:
        type: string
      nhNamePath:
        type: string
  Collaboration:
    type: object
    properties:
      collabId:
        type: integer
      collabName:
        type: string
      collabPurpose:
        type: string
      wbList:
        type: array
        items:
          $ref: '#/definitions/Whiteboard'
  Whiteboard:
    type: object
    properties:
      wbId:
        type: integer
      wbName:
        type: string
      gridList:
        type: array
        items:
          $ref: '#/definitions/GridInfo'
  CellBuffer:
    type: object
    properties:
      info:
        $ref: '#/definitions/GridInfo'
      rowArray:
        type: array
        items:
          type: integer
      columnArray:
        type: array
        items:
          type: integer
      rowChainArray:
        type: array
        items:
          $ref: '#/definitions/RowChain'
      columnChainArray:
        type: array
        items:
          $ref: '#/definitions/ColumnChain'
      columnCellArrays:
        type: array
        items:
          $ref: '#/definitions/SequencedCellArray'
      gridChangeBuffer:
        $ref: '#/definitions/GridChangeBuffer'
  NeighborhoodPath:
    type: object
    properties:
      levels:
        type: integer
      nhLevel0:
        type: integer
      nhLevel1:
        type: integer
      nhLevel2:
        type: integer
      nhLevel3:
        type: integer
  GridTransaction:
    type: object
    properties:
      txId:
        type: integer
      txCreatedByEmail:
        type: string
      txCreationTimeUTC:
        type: string
        format: date-time
      comment:
        type: string
      rowAdded:
        type: boolean
      rowDeleted:
        type: boolean
      columnAdded:
        type: boolean
      cellUpdated:
        type: boolean
      formulaUpdated:
        type: boolean
      baselineAdded:
        type: boolean
  GridChanges:
    type: object
    properties:
      info:
        $ref: '#/definitions/GridInfo'
      rowArray:
        type: array
        items:
          type: integer
      columnArray:
        type: array
        items:
          type: integer
      columnCellArrays:
        type: array
        items:
          $ref: '#/definitions/SequencedCellArray'
      rows:
        type: array
        items:
          $ref: '#/definitions/RowChain'
      columns:
        type: array
        items:
          $ref: '#/definitions/ColumnChain'
      cells:
        type: array
        items:
          $ref: '#/definitions/ChangedCell'
      statusChanges:
        type: array
        items:
          $ref: '#/definitions/StatusChange'
  GridChangeBuffer:
    type: object
    properties:
      critical:
        type: integer
      criticalLevel:
        type: integer
      newRowArray:
        type: array
        items:
          $ref: '#/definitions/RowChain'
      deletedRowArray:
        type: array
        items:
          type: integer
      newColumnArray:
        type: array
        items:
          $ref: '#/definitions/ColumnChain'
      deletedColumnArray:
        type: array
        items:
          type: integer
      cellChanges:
        type: array
        items:
          $ref: '#/definitions/ChangedCell'
  GridInfo:
    type: object
    properties:
      gridId:
        type: integer
      gridName:
        type: string
      gridPurpose:
        type: string
      view:
        type: string
      importTxId:
        type: integer
      exportTxId:
        type: integer
      filter:
        type: string
      asOfTxId:
        type: integer
      baselineId:
        type: integer
      serverName:
        type: string
      serverURL:
        type: string
      collabId:
        type: integer
      wbId:
        type: integer
      memberId:
        type: integer
      userId:
        type: integer
      nhId:
        type: integer
      rowCount:
        type: integer
      colCount:
        type: integer
      maxTxId:
        type: integer
      mode:
        type: integer
      criteriaTableId:
        type: integer
      neighborhoodHeirarchy:
        $ref: '#/definitions/NeighborhoodPath'
      creationTxId:
        type: integer
      peerAccess:
        type: integer
      privateAccess:
        type: integer
      friendAccess:
        type: integer
      isActive:
        type: boolean
      sequenceNumber:
        type: number
        format: float
      isLocked:
        type: boolean
      lockTxId:
        type: integer
  Grid:
    type: object
    properties:
      id:
        type: integer
      collabId:
        type: integer
      wbId:
        type: integer
      memberId:
        type: integer
      name:
        type: string
      description:
        type: string
  GridChain:
    type: object
    properties:
      gridId:
        type: integer
      gridInfo:
        $ref: '#/definitions/GridInfo'
      maxTxId:
        type: integer
      gridRows:
        type: array
        items:
          $ref: '#/definitions/RowChain'
      gridColumns:
        type: array
        items:
          $ref: '#/definitions/ColumnChain'
      gridCells:
        type: array
        items:
          $ref: '#/definitions/CellChain'
      gridTransactions:
        type: array
        items:
          $ref: '#/definitions/Transaction'
      gridFormulas:
        type: array
        items:
          $ref: '#/definitions/FormulaValue'
      gridCellStatusChanges:
        type: array
        items:
          $ref: '#/definitions/StatusChange'
  RowChain:
    type: object
    properties:
      gridId:
        type: integer
      rowId:
        type: integer
      rowSequenceNumber:
        type: number
        format: float
      previousRowId:
        type: integer
      previousRowOffset:
        type: integer
      isActive:
        type: boolean
      rowName:
        type: string
      ownerUserId:
        type: integer
      ownerEmail:
        type: string
      ownershipAssignedTxId:
        type: integer
      rowCreationTxId:
        type: integer
      rowCreatorUserId:
        type: integer
      rowDeletionTxId:
        type: integer
      rowDeletionUserId:
        type: integer
  ColumnChain:
    type: object
    properties:
      gridId:
        type: integer
      columnId:
        type: integer
      columnName:
        type: string
      columnSequenceNumber:
        type: number
        format: float
      previousColumnId:
        type: integer
      previousColumnOffset:
        type: integer
      columnType:
        type: string
      columnWidth:
        type: integer
      columnSource:
        type: string
      isActive:
        type: boolean
      ownerUserId:
        type: integer
      ownerEmail:
        type: string
      columnCreationTxId:
        type: integer
      columnDeletionTxId:
        type: integer
      columnDeletionUserId:
        type: integer
  ChangedCell:
    type: object
    properties:
      cellId:
        type: integer
      rowId:
        type: integer
      columnId:
        type: integer
      rowSequenceNumber:
        type: number
        format: float
      columnSequenceNumber:
        type: number
        format: float
      cellValue:
        type: string
      cellFormula:
        type: string
      isActive:
        type: boolean
      txId:
        type: integer
      changeFlag:
        type: integer
      access:
        type: integer
  CellChain:
    type: object
    properties:
      cellId:
        type: integer
      rowId:
        type: integer
      columnId:
        type: integer
      cellType:
        type: string
      isActive:
        type: boolean
      changeFlag:
        type: integer
      access:
        type: integer
      cellHistory:
        type: array
        items:
          $ref: '#/definitions/CellTransaction'
      cellStatus:
        type: array
        items:
          $ref: '#/definitions/CellStatus'
  CellTransaction:
    type: object
    properties:
      cellId:
        type: integer
      stringValueId:
        type: integer
      stringValue:
        type: string
      txId:
        type: integer
      formulaId:
        type: integer
  CellStatus:
    type: object
    properties:
      cellStatusId:
        type: integer
      cellId:
        type: integer
      isActive:
        type: boolean
      txId:
        type: integer
  StatusChange:
    type: object
    properties:
      rowId:
        type: integer
      columnId:
        type: integer
      isActive:
        type: boolean
      txId:
        type: integer
      txTimeUTC:
        type: string
        format: date-time
      comment:
        type: string
      txUserEmail:
        type: string
      columnSequenceNumber:
        type: number
        format: float
      rowSequenceNumber:
        type: number
        format: float
  FormulaValue:
    type: object
    properties:
      formulaId:
        type: integer
      formula:
        type: string
      formulaIndex:
        type: string
      txId:
        type: integer
  SequencedCellArray:
    type: object
    properties:
      columnId:
        type: integer
      columnSequenceNumber:
        type: number
        format: float
      cellValues:
        type: array
        items:
          type: string
      cellFormulas:
        type: array
        items:
          type: string
      cellAccess:
        type: array
        items:
          type: integer
  ResponseInfo:
    type: object
    properties:
      status:
        type: string
      message:
        type: string
      failureDetails:
        type: array
        items:
          $ref: '#/definitions/ResponseErrorInfo'
      invalidRequestDetails:
        type: array
        items:
          $ref: '#/definitions/RequestErrorInfo'
  RequestErrorInfo:
    type: object
    properties:
      errorMessage:
        type: string
      errorDetails:
        type: array
        items:
          $ref: '#/definitions/ErrorRequestObject'
  ResponseErrorInfo:
    type: object
    properties:
      errorMessage:
        type: string
      errorDetails:
        type: array
        items:
          $ref: '#/definitions/ErrorRequestObject'
  MessageDetail:
    type: object
    required:
    - error
    - path
    - proposedSolution
    properties:
      error:
        type: string
      path:
        type: string
      proposedSolution:
        type: string
  ErrorRequestObject:
    type: object
    required:
    - error
    - path
    - proposedSolution
    properties:
      error:
        type: string
      path:
        type: string
      proposedSolution:
        type: string
  SampleDataTypes:
    type: object
    properties:
      typeNumberFormatNone:
        type: number
      typeNumberFormatFloat:
        type: number
        format: float
      typeNumberFormatDouble:
        type: number
        format: double
      typeIntegerFormatNone:
        type: integer
      typeIntegerFormatInt32:
        type: integer
        format: int32
      typeIntegerFormatInt64:
        type: integer
        format: int64
      typeStringFormatDate-time:
        type: string
        format: date-time
      typeStringFormatDate:
        type: string
        format: date
      typeStringFormatByte:
        type: string
        format: byte
        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      typeStringFormatBinary:
        type: string
        format: binary
      typeBoolean:
        type: boolean
