/*
 * Boardwalk Cuboid Services
 * Boardwalk Rest API
 *
 * OpenAPI spec version: 1.0.2
 * Contact: apisupport@boardwalltech.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.ChangedCell;
import io.swagger.model.ColumnChain;
import io.swagger.model.GridInfo;
import io.swagger.model.RowChain;
import io.swagger.model.SequencedCellArray;
import io.swagger.model.StatusChange;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
/**
 * GridChanges
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-10-05T07:30:29.578Z")
public class GridChanges   {
  @JsonProperty("info")
  private GridInfo info = null;

  @JsonProperty("rowArray")
  private List<Integer> rowArray = null;

  @JsonProperty("columnArray")
  private List<Integer> columnArray = null;

  @JsonProperty("columnCellArrays")
  private List<SequencedCellArray> columnCellArrays = null;

  @JsonProperty("rows")
  private List<RowChain> rows = null;

  @JsonProperty("columns")
  private List<ColumnChain> columns = null;

  @JsonProperty("cells")
  private List<ChangedCell> cells = null;

  @JsonProperty("statusChanges")
  private List<StatusChange> statusChanges = null;

  public GridChanges info(GridInfo info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   **/
  @JsonProperty("info")
  @ApiModelProperty(value = "")
  public GridInfo getInfo() {
    return info;
  }

  public void setInfo(GridInfo info) {
    this.info = info;
  }

  public GridChanges rowArray(List<Integer> rowArray) {
    this.rowArray = rowArray;
    return this;
  }

  public GridChanges addRowArrayItem(Integer rowArrayItem) {
    if (this.rowArray == null) {
      this.rowArray = new ArrayList<Integer>();
    }
    this.rowArray.add(rowArrayItem);
    return this;
  }

  /**
   * Get rowArray
   * @return rowArray
   **/
  @JsonProperty("rowArray")
  @ApiModelProperty(value = "")
  public List<Integer> getRowArray() {
    return rowArray;
  }

  public void setRowArray(List<Integer> rowArray) {
    this.rowArray = rowArray;
  }

  public GridChanges columnArray(List<Integer> columnArray) {
    this.columnArray = columnArray;
    return this;
  }

  public GridChanges addColumnArrayItem(Integer columnArrayItem) {
    if (this.columnArray == null) {
      this.columnArray = new ArrayList<Integer>();
    }
    this.columnArray.add(columnArrayItem);
    return this;
  }

  /**
   * Get columnArray
   * @return columnArray
   **/
  @JsonProperty("columnArray")
  @ApiModelProperty(value = "")
  public List<Integer> getColumnArray() {
    return columnArray;
  }

  public void setColumnArray(List<Integer> columnArray) {
    this.columnArray = columnArray;
  }

  public GridChanges columnCellArrays(List<SequencedCellArray> columnCellArrays) {
    this.columnCellArrays = columnCellArrays;
    return this;
  }

  public GridChanges addColumnCellArraysItem(SequencedCellArray columnCellArraysItem) {
    if (this.columnCellArrays == null) {
      this.columnCellArrays = new ArrayList<SequencedCellArray>();
    }
    this.columnCellArrays.add(columnCellArraysItem);
    return this;
  }

  /**
   * Get columnCellArrays
   * @return columnCellArrays
   **/
  @JsonProperty("columnCellArrays")
  @ApiModelProperty(value = "")
  public List<SequencedCellArray> getColumnCellArrays() {
    return columnCellArrays;
  }

  public void setColumnCellArrays(List<SequencedCellArray> columnCellArrays) {
    this.columnCellArrays = columnCellArrays;
  }

  public GridChanges rows(List<RowChain> rows) {
    this.rows = rows;
    return this;
  }

  public GridChanges addRowsItem(RowChain rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<RowChain>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Get rows
   * @return rows
   **/
  @JsonProperty("rows")
  @ApiModelProperty(value = "")
  public List<RowChain> getRows() {
    return rows;
  }

  public void setRows(List<RowChain> rows) {
    this.rows = rows;
  }

  public GridChanges columns(List<ColumnChain> columns) {
    this.columns = columns;
    return this;
  }

  public GridChanges addColumnsItem(ColumnChain columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<ColumnChain>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * Get columns
   * @return columns
   **/
  @JsonProperty("columns")
  @ApiModelProperty(value = "")
  public List<ColumnChain> getColumns() {
    return columns;
  }

  public void setColumns(List<ColumnChain> columns) {
    this.columns = columns;
  }

  public GridChanges cells(List<ChangedCell> cells) {
    this.cells = cells;
    return this;
  }

  public GridChanges addCellsItem(ChangedCell cellsItem) {
    if (this.cells == null) {
      this.cells = new ArrayList<ChangedCell>();
    }
    this.cells.add(cellsItem);
    return this;
  }

  /**
   * Get cells
   * @return cells
   **/
  @JsonProperty("cells")
  @ApiModelProperty(value = "")
  public List<ChangedCell> getCells() {
    return cells;
  }

  public void setCells(List<ChangedCell> cells) {
    this.cells = cells;
  }

  public GridChanges statusChanges(List<StatusChange> statusChanges) {
    this.statusChanges = statusChanges;
    return this;
  }

  public GridChanges addStatusChangesItem(StatusChange statusChangesItem) {
    if (this.statusChanges == null) {
      this.statusChanges = new ArrayList<StatusChange>();
    }
    this.statusChanges.add(statusChangesItem);
    return this;
  }

  /**
   * Get statusChanges
   * @return statusChanges
   **/
  @JsonProperty("statusChanges")
  @ApiModelProperty(value = "")
  public List<StatusChange> getStatusChanges() {
    return statusChanges;
  }

  public void setStatusChanges(List<StatusChange> statusChanges) {
    this.statusChanges = statusChanges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GridChanges gridChanges = (GridChanges) o;
    return Objects.equals(this.info, gridChanges.info) &&
        Objects.equals(this.rowArray, gridChanges.rowArray) &&
        Objects.equals(this.columnArray, gridChanges.columnArray) &&
        Objects.equals(this.columnCellArrays, gridChanges.columnCellArrays) &&
        Objects.equals(this.rows, gridChanges.rows) &&
        Objects.equals(this.columns, gridChanges.columns) &&
        Objects.equals(this.cells, gridChanges.cells) &&
        Objects.equals(this.statusChanges, gridChanges.statusChanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(info, rowArray, columnArray, columnCellArrays, rows, columns, cells, statusChanges);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GridChanges {\n");
    
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    rowArray: ").append(toIndentedString(rowArray)).append("\n");
    sb.append("    columnArray: ").append(toIndentedString(columnArray)).append("\n");
    sb.append("    columnCellArrays: ").append(toIndentedString(columnCellArrays)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    cells: ").append(toIndentedString(cells)).append("\n");
    sb.append("    statusChanges: ").append(toIndentedString(statusChanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

