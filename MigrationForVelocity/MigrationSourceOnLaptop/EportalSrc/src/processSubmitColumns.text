	public static void processSubmitColumns(Connection connection, int tid,  String ColumnData) throws BoardwalkException, SystemException, SQLException
	{

		// default access
		boolean setDefaultAccess = false;
		boolean ExceptionAdministerColumns = false;
		boolean newColsAdded = false;


		ArrayList columnNames = null;
		Vector dcv = new Vector();
		
		//String param = getServletConfig().getInitParameter("BW_RESTRICT_NEW_COLUMN");
		//System.out.println("BW_RESTRICT_NEW_COLUMN=" + param);
		//if (param != null)
		//{
		//    setDefaultAccess = true;
		//}

		columnIds = new ArrayList(numColumns);
		columnNames = new ArrayList(numColumns);
		//System.out.println("Column Names = " + sub);
		//String[] columnArrStr = sub.split(Seperator);
		//System.out.println("columnArrStr.length = " + columnArrStr.length);
		int prevColId = -1;
		for (int cni = 0; cni < columnArrStr.length; cni = cni + 2)
		{
			int colId = -1;
			String colName = "";
			int pcOffset = 1;
			String colIdStr = null;
			colIdStr = columnArrStr[cni];
			colName = columnArrStr[cni + 1];
			//System.out.println("colIdStr = " + colIdStr);
			//System.out.println("colName = " + colName);
			if (colIdStr.trim().equals(""))
			{
				if (canAdministerColumns)
				{
					try
					{
						lockTableForUpdate(connection, tableId);
						System.out.println("Inserting column after col = " + prevColId + " with offset of " + pcOffset);
					}
					catch (Exception e)
					{
						xlErrorCells.add(new xlErrorNew(tableId, 0, 0, 12008));
						throw new BoardwalkException(12008);
					}

					try
					{
						colId = TableManager.createColumnXL(
												connection,
												tableId,
												columnArrStr[cni + 1],
												prevColId,
												pcOffset,
												tid
												);
						newColBuffer.append(new Integer(columnIds.size() + 1).toString() + Seperator + colId + Seperator);
						newColsAdded = true;
						pcOffset++;
						prevColId = colId;
					}
					catch (Exception e)
					{
						// unique column violation
						xlErrorCells.add(new xlErrorNew(tableId, 0, prevColId, 12001));
						System.out.println("unique column violation");
						throw new BoardwalkException(12001);
					}
				}
				else
				{
					// User does not have access to add columns
					xlErrorCells.add(new xlErrorNew(tableId, 0, prevColId, 12010));
					ExceptionAdministerColumns = true;
					System.out.println("No access to add column");
				}
			}
			else
			{
				try
				{
					colId = Integer.parseInt(colIdStr);
					prevColId = colId;
					pcOffset = 1;
				}
				catch (NumberFormatException nfe)
				{
					colIdStr = colIdStr.substring(0, colIdStr.length() - 1);
					if (!(colIdStr.equals("")))
					{
						colId = Integer.parseInt(colIdStr);
						dcv.addElement(new Integer(colIdStr));
					}
				}
			}

			//System.out.println("Column Id = " + columnArrStr[cni] + " Name = " + columnArrStr[cni + 1]);
			columnIds.add(new Integer(colId));
			columnNames.add(colName);

			if (colIdHash.get(new Integer(colId)) == null)
			{
				colIdHash.put(new Integer(colId), new Integer(colId));
			}
		}

		if (newColsAdded == true)
		{
			if (isCritical <= 0)
			{
				if ((criticalLevel & (1 << 1)) == (1 << 1))
				{
					isCritical = 1;
					System.out.println("Transaction critical because columns added");
				}
			}
			TableManager.resequenceColumns(connection, tableId);
		}

		//// find columns to be deleted : This can be optimized, so that the following will be called
		//// only if rows have to be deleted. The client knows if there are any rows to be deleted
		//// get the current rows from the server, to find deleted rows
		//String query = "SELECT * FROM BW_GetColumnAccess(?,?,?) AS COL";
		//PreparedStatement stmt = connection.prepareStatement(query);
		//stmt.setInt(1, tableId);
		//stmt.setInt(2, userId);
		//stmt.setInt(3, memberId);
		//ResultSet rs = stmt.executeQuery();

		//while (rs.next())
		//{
		//    /*
		//     * colid     int,
		//     * access_ int,
		//     * prev_access int,
		//     * access_tid int,
		//     * sequence_number float
		//     */
		//    int sColId = rs.getInt(1);
		//    int saccess = rs.getInt(2);
		//    int sprevaccess = rs.getInt(3);
		//    int saccesstid = rs.getInt(4);
		//    if (colIdHash.get(new Integer(sColId)) == null) // active row on server is not in xl
		//    {
		//        if (saccesstid <= importTid)
		//        {
		//            System.out.println("Deactivating column id = " + sColId);
		//            dcv.addElement(new Integer(sColId));
		//        }
		//    }
		//    else
		//    {
		//        // This particular Hash map can be used to get the access right later when updating cells
		//        //System.out.println(" Access sColId = " + sColId);
		//        //System.out.println(" saccess sColId = " + saccess);
		//        accCols(new Integer(sColId), new Integer(saccess));
		//    }
		//}
		//rs.close();
		//stmt.close();

		//rs = null;
		//stmt = null;
		//query = null;
		int ColTobeDeactivated = dcv.size();

		if (ColTobeDeactivated > 0 && canAdministerColumns == false)
		{
			// Throw exception
			// User does not have access to remove columns
			// Same message as of Add column will be shown here
			Iterator dcvi = dcv.iterator();
			while (dcvi.hasNext())
			{
				int dColId = ((Integer)dcvi.next()).intValue();
				xlErrorCells.add(new xlErrorNew(tableId, 0, dColId, 12010));
				if (ExceptionAdministerColumns == false)
					ExceptionAdministerColumns = true;
			}
			System.out.println("No access to delete column");
		}

		Iterator dcvi = dcv.iterator();
		while (dcvi.hasNext() && canAdministerColumns)
		{
			int dColId = ((Integer)dcvi.next()).intValue();
			if (colIdHash.get(new Integer(dColId)) != null)
				colIdHash.remove(new Integer(dColId));

			ColsDeleted = ColumnManager.deleteColumn(connection, dColId, tid);
		}
		if (ColTobeDeactivated > 0)
		{
			if (isCritical <= 0)
			{
				if ((criticalLevel & (1 << 2)) == (1 << 2))
				{
					isCritical = 1;
					System.out.println("Transaction critical because columns deleted");
				}
			}
		}


	}

	public static void  processSubmitRows(Connection connection, int tid,  String rowData) throws BoardwalkException, SystemException, SQLException
	{
		boolean newRowsAdded = false;

		Vector xlErrorCells = new Vector();
		Vector xlDeleteRows = new Vector();
		HashMap rowIdHash = new HashMap();
		HashMap colIdHash = new HashMap();

		// The Vectore which holds the Row ids marked for Deletion from client
		
		boolean ExceptionAddRows = false;
		boolean ExceptionDeleteRows = false;
		HashMap newRowHash = new HashMap();

		System.out.println("--------------Processing Rows--------------");
		//rowIds = new ArrayList(numRows);
		int rowId = -1;
		int prevRowId = -1;
		int prOffset = 1;
		int ri = 0;
		//int rj = sub.indexOf(Seperator);  // First substring //  JSON Changes
		int ccount = 0;
		String rowIdStr = null;
		Vector nrv = new Vector();
		boolean isDeletedRow = false;
		//int rowIdx = 0;
		//while (rj >= 0) //  JSON Changes
		while (ri < sub.length-1) //  JSON Changes
		{
			rowId = -1;
			//  JSON Changes
			//rowIdStr = sub.substring(ri, rj);
			rowIdStr = sub[ri];
			System.out.println("rowIdStr="+rowIdStr);
			//  JSON Changes
			if (rowIdStr.trim().equals(""))
			{
				if (canAddRows)
				{
					try
					{
						lockTableForUpdate(connection, tableId);
					}
					catch (Exception sq)
					{
						xlErrorCells.add(new xlErrorNew(tableId, 0, 0, 12008));
						throw new BoardwalkException(12008);
					}

					try
					{
						newXLRow nr = new newXLRow(prevRowId, prOffset, ccount);
						nrv.addElement(nr);
						//rowId = TableManager.createRowXL(connection, tableId, "", prevRowId, prOffset, tid);
						//System.out.println("Added row with id = " + rowId);
						//newRowBuffer.append(new Integer(rowIds.size() + 1).toString() + Seperator + rowId + Seperator);
						newRowsAdded = true;
						prOffset++;
					}
					catch (Exception e)
					{
						xlErrorCells.add(new xlErrorNew(tableId, prevRowId, 0, 12001));
						throw new BoardwalkException(12001);
					}
				}
				else
				{
					xlErrorCells.add(new xlErrorNew(tableId, prevRowId, 0, 12012));
					ExceptionAddRows = true;
					System.out.println("No access to add rows");
				}
			}
			else
			{
				try
				{
					rowId = Integer.parseInt(rowIdStr);

					prevRowId = rowId;
					prOffset = 1;
				}
				catch (NumberFormatException numex)
				{
					rowIdStr = rowIdStr.substring(0, rowIdStr.length() - 1);
					if (!(rowIdStr.equals("")))
					{
						rowId = Integer.parseInt(rowIdStr);
						xlDeleteRows.addElement(new Integer(rowIdStr));
					}
				}

			}
			//rowIds.add(new Integer(rowId));
			if (rowId != -1 && rowIdHash.get(new Integer(ccount)) == null && isDeletedRow == false)
			{
				rowIdHash.put(new Integer(ccount), new Integer(rowId));
			}

			//rowIdx = rowIdx + 1;
			ccount++;
			//  JSON Changes
			//ri=rj+1;
			ri = ri + 1;
			//rj = sub.indexOf(Seperator, ri);   // Rest of substrings
			//System.out.println("rj 915="+rj);
		}
		//rowIdStr =sub.substring(ri);// Last substring
		rowIdStr = sub[ri];
		System.out.println("rowIdStr 919="+rowIdStr);
		//  JSON Changes

		if (rowIdStr.trim().equals(""))
		{
			if (canAddRows)
			{
				try
				{
					lockTableForUpdate(connection, tableId);
				}
				catch (Exception sq)
				{
					xlErrorCells.add(new xlErrorNew(tableId, 0, 0, 12008));
					System.out.println("Table Lock Error");
					throw new BoardwalkException(12008);
				}

				try
				{
					newXLRow nr = new newXLRow(prevRowId, prOffset, ccount);
					nrv.addElement(nr);
					//rowId = TableManager.createRowXL(connection, tableId, "", prevRowId, prOffset, tid);
					//System.out.println("Added row with id = " + rowId);
					//newRowBuffer.append(new Integer(rowIds.size() + 1).toString() + Seperator + rowId + Seperator);
					newRowsAdded = true;
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
			else
			{
				xlErrorCells.add(new xlErrorNew(tableId, prevRowId, 0, 12012));
				ExceptionAddRows = true;
				System.out.println("No access to add rows");
			}
		}
		else
		{
			//System.out.println("=============canAddRows Value of rowid============="+rowId);
			try
			{
				rowId = Integer.parseInt(rowIdStr);
				prevRowId = rowId;
				prOffset = 1;
			}
			catch (NumberFormatException exp)
			{
				System.out.println("rowIdStr 969="+rowIdStr); //  JSON Changes
				rowIdStr = rowIdStr.substring(0, rowIdStr.length() - 1);
				if (!(rowIdStr.equals("")))
				{
					rowId = Integer.parseInt(rowIdStr);
					xlDeleteRows.addElement(new Integer(rowIdStr));
				}

			}

		}
		//rowIds.add(new Integer(rowId));
		//System.out.println("Processing rowId = " + rowId);
		if (rowId != -1 && rowIdHash.get(new Integer(ccount)) == null && isDeletedRow == false)
		{
			rowIdHash.put(new Integer(ccount), new Integer(rowId));
		}


		// resequence the rows
		if (newRowsAdded == true)
		{
			// add the new rows
			String query =
				"INSERT INTO BW_NEW_ROW " +
				"(PREV_ROW_ID, TX_ID, OFFSET) " +
				"VALUES " +
				"(?, ?, ?) ";
			PreparedStatement stmt = connection.prepareStatement(query);
			Iterator nri = nrv.iterator();
			while (nri.hasNext())
			{
				newXLRow nr = (newXLRow)nri.next();
				stmt.setInt(1, nr.getPreviousRowId());
				stmt.setInt(2, tid);
				stmt.setInt(3, nr.getIndex());
				stmt.addBatch();
			}
			int[] rescnt = stmt.executeBatch();
			stmt.clearBatch();
			stmt.close();
			stmt = null;

			query = "{CALL BW_CR_ROWS_XL(?,?,?)}";
			CallableStatement cstmt = connection.prepareCall(query);
			cstmt.setInt(1, tableId);
			cstmt.setInt(2, userId);
			cstmt.setInt(3, tid);
			cstmt.executeUpdate();
			cstmt.close();
			cstmt = null;


			// create the buffer
			query = "SELECT BW_ROW.ID, BW_ROW.NAME FROM BW_ROW WHERE TX_ID = ?";
			stmt = connection.prepareStatement(query);
			stmt.setInt(1, tid);
			ResultSet rs = stmt.executeQuery();
			while (rs.next())
			{
				int rid = rs.getInt(1);
				int ridx = Integer.parseInt(rs.getString(2));
				rowIdHash.put(new Integer(ridx), new Integer(rid));
				//newRowBuffer.append(new Integer(rowIds.size() + 1).toString() + Seperator + rid + Seperator);
				newRowBuffer.append((ridx + 1) + Seperator + rid + Seperator);
			}

			stmt.close();
			rs.close();
			stmt = null;
			rs = null;

			// resequence the rows
			TableManager.resequenceRows(connection, tableId);

			if (isCritical <= 0)
			{
				System.out.println("critical level = " + criticalLevel);
				System.out.println("(1<<3) = " + (1 << 3));
				System.out.println("(criticalLevel & (1 << 3)) = " + (criticalLevel & (1 << 3)));
				if ((criticalLevel & (1 << 3)) == (1 << 3))
				{
					isCritical = 1;
					System.out.println("Transaction critical because rows added");
				}
			}
		}

		// delete the rows
		if (xlDeleteRows.size() > 0)
		{
			Iterator rowI = xlDeleteRows.iterator();
			System.out.println("canDeleteRows="+canDeleteRows+"----------------Deleting rows---------- " + xlDeleteRows.size());
			if (canDeleteRows == false)
			{
				// Throw exception
				// User does not have access to remove rows


				while (rowI.hasNext())
				{
					int delrowId = ((Integer)rowI.next()).intValue();
					xlErrorCells.add(new xlErrorNew(tableId, delrowId, 0, 12013));
					ExceptionDeleteRows = true;
				}
				System.out.println("No access to Delete rows");
			}
			else
			{
				// this will remove the row from the hash map here itself
				//while(rowI.hasNext())
				//{
				//    int delrowId = ((Integer)rowI.next()).intValue();
				//    if (rowIdHash.get(new Integer(delrowId)) != null)
				//    {
				//        rowIdHash.remove(new Integer(delrowId));
				//        System.out.println("Deleting rowid from rowIdHash : " + delrowId);
				//        System.out.println("rowidHash.size() = " + rowIdHash.size());
				//    }

				//}

				//			System.out.println("----------Inside Deactivate Row-----------"+delrowId);
				RowsDeleted = RowManager.deactivateRows(connection, xlDeleteRows, tid);
				if (isCritical <= 0)
				{
					if ((criticalLevel & (1 << 4)) == (1 << 4))
					{
						isCritical = 1;
						System.out.println("Transaction critical because rows deleted");
					}
				}
			}
		}
		//if (serverSideDeletedRows.size() > 0)
		//{
		//    Iterator rowI = serverSideDeletedRows.iterator();
		//    while(rowI.hasNext())
		//    {
		//        int delrowId = ((Integer)rowI.next()).intValue();
		//        if(rowIdHash.get(new Integer(delrowId)) != null)
		//            rowIdHash.remove(new Integer(delrowId));

		//    }
		//}


	}

				
	public static void  processSubmitCells(Connection connection, int tid,  String cellData) throws BoardwalkException, SystemException, SQLException
	{

	if(sub.length!=1) //  JSON Changes
	{
		ArrayList formulaIds = null;
		ArrayList strValIds = null;
		String formulaArrayAdd[] = null;
		String formulaArrayDel[] = null;
		int numCellsChanged = 0;
		Vector xlErrorCells = new Vector();

		System.out.println("Updating cells in batch . Default access = " + defaultAccess);
		//System.out.println("Changed cell data = " + sub);
		String xlcellval = null;
		String xlFormula = null;
		int xlRowIdx = -1;
		int xlColIdx = -1;
		int xlRowId = -1;
		int xlColId = -1;
		int cellChangeFlag = 1;
		int ci = 0;
		//int cj = sub.indexOf(Seperator);  // First substring //  JSON Changes
		int cj = 0; //  JSON Changes
		int ccount = 0;

		int isCritical;
		int criticalLevel;

		String query = " INSERT INTO BW_RC_STRING_VALUE VALUES(?, ?, ?, ?, ?, ?) ";

		PreparedStatement stmt = connection.prepareStatement(query);

		int batchSize = 10000;
		int batchCounter = 0;
		
		//  JSON Changes
		while (ci < sub.length)
		{
			//xlRowIdx = Integer.parseInt(sub.substring(ci, cj)); // 
			xlRowIdx = Integer.parseInt(sub[ci]);
			System.out.println("xlRowIdx = " + xlRowIdx);
			ci = ci + 1;
			//cj = sub.indexOf(Seperator, ci);
			//xlColIdx = Integer.parseInt(sub.substring(ci, cj));

			xlColIdx=Integer.parseInt(sub[ci]);
			System.out.println("xlColIdx = " + xlColIdx);
			ci = ci + 1;
			//cj = sub.indexOf(Seperator, ci);
			//xlcellval = sub.substring(ci, cj);
			xlcellval=sub[ci];
			System.out.println("xlcellval="+xlcellval);
			ci = ci + 1;
			//cj = sub.indexOf(Seperator, ci);
			
			//System.out.println("cj after celval"+cj);
			//if (cj == -1)
			if(ci== sub.length)
				//xlFormula = sub.substring(ci);
				xlFormula=sub[ci];
			else
				//xlFormula = sub.substring(ci, cj);
				xlFormula=sub[ci];
				
				System.out.println("xlFormula="+xlFormula);
			//  JSON Changes
			if (xlFormula.indexOf("=") < 0)
			{
				xlFormula = null;
			}
			System.out.println("xlcellval = " + xlcellval);

			//  JSON Changes
			ci = ci + 1;
			//cj = sub.indexOf(Seperator, ci);
			cellChangeFlag = Integer.parseInt(sub[ci]);
			System.out.println("cellChangeFlag="+cellChangeFlag);
			//  JSON Changes
			//xlRowId = ((Integer)rowIds.get(xlRowIdx)).intValue();
			xlRowId = ((Integer)rowIdHash.get(new Integer(xlRowIdx))).intValue();
			xlColId = ((Integer)columnIds.get(xlColIdx)).intValue();
			System.out.println("xlRowId="+xlRowId+"xlColId="+xlColId); //  JSON Changes
			int ColAcess = defaultAccess; // assuming column access is implemented in client
			if (accCols.get(new Integer(xlColId)) != null)
				ColAcess = ((Integer)accCols.get(new Integer(xlColId))).intValue();
			
			// override access from access table
			if (colCellAccess != null && colCellAccess.size() > 0)
			{ 
				Object cA = colCellAccess.get(new Integer(xlColId));
				if (cA != null){
					if (cA instanceof Integer)
					{
						ColAcess = ((Integer)cA).intValue();
						System.out.println("column acess for colid = " + xlColId + " is " + ColAcess);
					}
					else
					{
						String accessString = (String)cA;
						System.out.println(accessString);
						Pattern pattern = Pattern.compile("(\\d)(\\?.*)");
						Matcher matcher = pattern.matcher(accessString);
						System.out.println("match count = " + matcher.groupCount());
						if(matcher.matches())
						{
							int access = Integer.parseInt(matcher.group(1));
							String accessInstr = matcher.group(2);
							System.out.println("column access for colid = " + xlColId + " is " + access +
									" if row matches accessQuery = " + accessInstr);
							System.out.println("Otherwise using defaultAccess = " + defaultAccess);
							System.out.println(accessQueryXrowSet.toString());
							if (((HashSet) accessQueryXrowSet.get(accessInstr)).contains(new Integer(xlRowId)))
							{
								ColAcess = access;
								System.out.println("Using access = " + ColAcess + "for cell with rowId = " + xlRowId + "matching condition " + accessInstr);
							}
						}
					}
				}
			}
					
			// If anything other change other than value change/formula change (row added, column added etc)
			if (cellChangeFlag > 2 && xlRowId > 0 && xlColId > 0)
			{
				stmt.setInt(1, xlRowId);
				stmt.setInt(2, xlColId);
				stmt.setString(3, xlcellval);
				stmt.setString(4, xlFormula);
				stmt.setInt(5, tid);
				stmt.setInt(6, cellChangeFlag);
				stmt.addBatch();
				numCellsChanged = numCellsChanged + 1;
				batchCounter = batchCounter + 1;
				if (batchCounter == batchSize)
				{
					int[] rescnt = stmt.executeBatch();
					stmt.clearBatch();
					batchCounter = 0;
				}

			}
			else if ((ColAcess == 2 && xlRowId > 0 && xlColId > 0) ||
					 (ColAcess == 1 && xlRowId > 0 && xlColId > 0 && xlFormula != null && cellChangeFlag == 1)) 
				// value or formula changed by user, cellChangeFlag = 1 or 2 ||
				// value changed by formula, cellChangeFlag = 1, access = 1
			{

				stmt.setInt(1, xlRowId);
				stmt.setInt(2, xlColId);
				stmt.setString(3, xlcellval);
				stmt.setString(4, xlFormula);
				stmt.setInt(5, tid);
				stmt.setInt(6, cellChangeFlag);
				stmt.addBatch();
				numCellsChanged = numCellsChanged + 1;
				batchCounter = batchCounter + 1;
				if (batchCounter == batchSize)
				{
					int[] rescnt = stmt.executeBatch();
					stmt.clearBatch();
					batchCounter = 0;
				}
			}
			else if (ColAcess == 0 || ColAcess == 1)
			{
				if (ColAcess == 1)
				{
					System.out.println("processCells():Cell access violation " +
							"rowId=" + xlRowId + " colId=" + xlColId +
							"value=" + xlcellval +
							"frmla=" + xlFormula +
							"cellChangeFlag=" + cellChangeFlag);
					if (xlRowId != -1)
						xlErrorCells.add(new xlErrorNew(tableId, xlRowId, xlColId, 12016));
				}
				else
				{
					System.out.println("New Column without Access Right Added");
					if (xlColId != -1 || xlRowId != -1)
						xlErrorCells.add(new xlErrorNew(tableId, xlRowId, xlColId, 12016));
				}
			}
			ccount++;
			//  JSON Changes
			if (ci<sub.length)
			{
				ci = ci + 1;
				//cj = sub.indexOf(Seperator, ci);   // Rest of substrings
				//System.out.println("cj last if="+cj);
			}
			//  JSON Changes
		}
		//if(numCellsChanged > 0 && ExceptionDeleteRows == false && ExceptionAddRows == false && ExceptionAdministerColumns == false)
		if (batchCounter > 0) // the last batch
		{
			int[] rescnt = stmt.executeBatch();
			stmt.clearBatch();
			System.out.print(".");
		}
		stmt.close();
		stmt = null;
		query = null;
		if (numCellsChanged > 0)
		{
			if (isCritical <= 0)
			{
				if ((criticalLevel & (1 << 5)) == (1 << 5))
				{
					isCritical = 1;
					System.out.println("Transaction critical because cells changed");
				}
			}
		}
		// update the cells based on the rcsv table
		query = "{CALL BW_UPD_CELL_FROM_RCSV(?,?,?,?)}";
		/*CallableStatement cstmt = connection.prepareCall(query);
		cstmt.setInt(1, tid);
		cstmt.setInt(2, importTid);
		cstmt.setInt(3, tableId);
		cstmt.setInt(4, userId);				
		int updCount = 0;
//		updCount = cstmt.executeUpdate();
		cstmt.close();
		cstmt = null;
System.out.println("tid " + tid);
System.out.println("importTid " + importTid);
System.out.println("tableId " + tableId);
System.out.println("userId " + userId);
		System.out.println("Time to update " + updCount + " cells for table= " + getElapsedTime());*/

}

	}