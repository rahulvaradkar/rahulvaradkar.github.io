/*
 * Boardwalk Cuboid Services
 * Boardwalk Rest API
 *
 * OpenAPI spec version: 1.0.2
 * Contact: apisupport@boardwalltech.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.Date;
import javax.validation.constraints.*;
import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
/**
 * SampleDataTypes
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-10-05T07:30:29.578Z")
public class SampleDataTypes   {
  @JsonProperty("typeNumberFormatNone")
  private BigDecimal typeNumberFormatNone = null;

  @JsonProperty("typeNumberFormatFloat")
  private Float typeNumberFormatFloat = null;

  @JsonProperty("typeNumberFormatDouble")
  private Double typeNumberFormatDouble = null;

  @JsonProperty("typeIntegerFormatNone")
  private Integer typeIntegerFormatNone = null;

  @JsonProperty("typeIntegerFormatInt32")
  private Integer typeIntegerFormatInt32 = null;

  @JsonProperty("typeIntegerFormatInt64")
  private Long typeIntegerFormatInt64 = null;

  @JsonProperty("typeStringFormatDate-time")
  private Date typeStringFormatDateTime = null;

  @JsonProperty("typeStringFormatDate")
  private Date typeStringFormatDate = null;

  @JsonProperty("typeStringFormatByte")
  private byte[] typeStringFormatByte = null;

  @JsonProperty("typeStringFormatBinary")
  private byte[] typeStringFormatBinary = null;

  @JsonProperty("typeBoolean")
  private Boolean typeBoolean = null;

  public SampleDataTypes typeNumberFormatNone(BigDecimal typeNumberFormatNone) {
    this.typeNumberFormatNone = typeNumberFormatNone;
    return this;
  }

  /**
   * Get typeNumberFormatNone
   * @return typeNumberFormatNone
   **/
  @JsonProperty("typeNumberFormatNone")
  @ApiModelProperty(value = "")
  public BigDecimal getTypeNumberFormatNone() {
    return typeNumberFormatNone;
  }

  public void setTypeNumberFormatNone(BigDecimal typeNumberFormatNone) {
    this.typeNumberFormatNone = typeNumberFormatNone;
  }

  public SampleDataTypes typeNumberFormatFloat(Float typeNumberFormatFloat) {
    this.typeNumberFormatFloat = typeNumberFormatFloat;
    return this;
  }

  /**
   * Get typeNumberFormatFloat
   * @return typeNumberFormatFloat
   **/
  @JsonProperty("typeNumberFormatFloat")
  @ApiModelProperty(value = "")
  public Float getTypeNumberFormatFloat() {
    return typeNumberFormatFloat;
  }

  public void setTypeNumberFormatFloat(Float typeNumberFormatFloat) {
    this.typeNumberFormatFloat = typeNumberFormatFloat;
  }

  public SampleDataTypes typeNumberFormatDouble(Double typeNumberFormatDouble) {
    this.typeNumberFormatDouble = typeNumberFormatDouble;
    return this;
  }

  /**
   * Get typeNumberFormatDouble
   * @return typeNumberFormatDouble
   **/
  @JsonProperty("typeNumberFormatDouble")
  @ApiModelProperty(value = "")
  public Double getTypeNumberFormatDouble() {
    return typeNumberFormatDouble;
  }

  public void setTypeNumberFormatDouble(Double typeNumberFormatDouble) {
    this.typeNumberFormatDouble = typeNumberFormatDouble;
  }

  public SampleDataTypes typeIntegerFormatNone(Integer typeIntegerFormatNone) {
    this.typeIntegerFormatNone = typeIntegerFormatNone;
    return this;
  }

  /**
   * Get typeIntegerFormatNone
   * @return typeIntegerFormatNone
   **/
  @JsonProperty("typeIntegerFormatNone")
  @ApiModelProperty(value = "")
  public Integer getTypeIntegerFormatNone() {
    return typeIntegerFormatNone;
  }

  public void setTypeIntegerFormatNone(Integer typeIntegerFormatNone) {
    this.typeIntegerFormatNone = typeIntegerFormatNone;
  }

  public SampleDataTypes typeIntegerFormatInt32(Integer typeIntegerFormatInt32) {
    this.typeIntegerFormatInt32 = typeIntegerFormatInt32;
    return this;
  }

  /**
   * Get typeIntegerFormatInt32
   * @return typeIntegerFormatInt32
   **/
  @JsonProperty("typeIntegerFormatInt32")
  @ApiModelProperty(value = "")
  public Integer getTypeIntegerFormatInt32() {
    return typeIntegerFormatInt32;
  }

  public void setTypeIntegerFormatInt32(Integer typeIntegerFormatInt32) {
    this.typeIntegerFormatInt32 = typeIntegerFormatInt32;
  }

  public SampleDataTypes typeIntegerFormatInt64(Long typeIntegerFormatInt64) {
    this.typeIntegerFormatInt64 = typeIntegerFormatInt64;
    return this;
  }

  /**
   * Get typeIntegerFormatInt64
   * @return typeIntegerFormatInt64
   **/
  @JsonProperty("typeIntegerFormatInt64")
  @ApiModelProperty(value = "")
  public Long getTypeIntegerFormatInt64() {
    return typeIntegerFormatInt64;
  }

  public void setTypeIntegerFormatInt64(Long typeIntegerFormatInt64) {
    this.typeIntegerFormatInt64 = typeIntegerFormatInt64;
  }

  public SampleDataTypes typeStringFormatDateTime(Date typeStringFormatDateTime) {
    this.typeStringFormatDateTime = typeStringFormatDateTime;
    return this;
  }

  /**
   * Get typeStringFormatDateTime
   * @return typeStringFormatDateTime
   **/
  @JsonProperty("typeStringFormatDate-time")
  @ApiModelProperty(value = "")
  public Date getTypeStringFormatDateTime() {
    return typeStringFormatDateTime;
  }

  public void setTypeStringFormatDateTime(Date typeStringFormatDateTime) {
    this.typeStringFormatDateTime = typeStringFormatDateTime;
  }

  public SampleDataTypes typeStringFormatDate(Date typeStringFormatDate) {
    this.typeStringFormatDate = typeStringFormatDate;
    return this;
  }

  /**
   * Get typeStringFormatDate
   * @return typeStringFormatDate
   **/
  @JsonProperty("typeStringFormatDate")
  @ApiModelProperty(value = "")
  public Date getTypeStringFormatDate() {
    return typeStringFormatDate;
  }

  public void setTypeStringFormatDate(Date typeStringFormatDate) {
    this.typeStringFormatDate = typeStringFormatDate;
  }

  public SampleDataTypes typeStringFormatByte(byte[] typeStringFormatByte) {
    this.typeStringFormatByte = typeStringFormatByte;
    return this;
  }

  /**
   * Get typeStringFormatByte
   * @return typeStringFormatByte
   **/
  @JsonProperty("typeStringFormatByte")
  @ApiModelProperty(value = "")
 @Pattern(regexp="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")  public byte[] getTypeStringFormatByte() {
    return typeStringFormatByte;
  }

  public void setTypeStringFormatByte(byte[] typeStringFormatByte) {
    this.typeStringFormatByte = typeStringFormatByte;
  }

  public SampleDataTypes typeStringFormatBinary(byte[] typeStringFormatBinary) {
    this.typeStringFormatBinary = typeStringFormatBinary;
    return this;
  }

  /**
   * Get typeStringFormatBinary
   * @return typeStringFormatBinary
   **/
  @JsonProperty("typeStringFormatBinary")
  @ApiModelProperty(value = "")
  public byte[] getTypeStringFormatBinary() {
    return typeStringFormatBinary;
  }

  public void setTypeStringFormatBinary(byte[] typeStringFormatBinary) {
    this.typeStringFormatBinary = typeStringFormatBinary;
  }

  public SampleDataTypes typeBoolean(Boolean typeBoolean) {
    this.typeBoolean = typeBoolean;
    return this;
  }

  /**
   * Get typeBoolean
   * @return typeBoolean
   **/
  @JsonProperty("typeBoolean")
  @ApiModelProperty(value = "")
  public Boolean isTypeBoolean() {
    return typeBoolean;
  }

  public void setTypeBoolean(Boolean typeBoolean) {
    this.typeBoolean = typeBoolean;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SampleDataTypes sampleDataTypes = (SampleDataTypes) o;
    return Objects.equals(this.typeNumberFormatNone, sampleDataTypes.typeNumberFormatNone) &&
        Objects.equals(this.typeNumberFormatFloat, sampleDataTypes.typeNumberFormatFloat) &&
        Objects.equals(this.typeNumberFormatDouble, sampleDataTypes.typeNumberFormatDouble) &&
        Objects.equals(this.typeIntegerFormatNone, sampleDataTypes.typeIntegerFormatNone) &&
        Objects.equals(this.typeIntegerFormatInt32, sampleDataTypes.typeIntegerFormatInt32) &&
        Objects.equals(this.typeIntegerFormatInt64, sampleDataTypes.typeIntegerFormatInt64) &&
        Objects.equals(this.typeStringFormatDateTime, sampleDataTypes.typeStringFormatDateTime) &&
        Objects.equals(this.typeStringFormatDate, sampleDataTypes.typeStringFormatDate) &&
        Objects.equals(this.typeStringFormatByte, sampleDataTypes.typeStringFormatByte) &&
        Objects.equals(this.typeStringFormatBinary, sampleDataTypes.typeStringFormatBinary) &&
        Objects.equals(this.typeBoolean, sampleDataTypes.typeBoolean);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeNumberFormatNone, typeNumberFormatFloat, typeNumberFormatDouble, typeIntegerFormatNone, typeIntegerFormatInt32, typeIntegerFormatInt64, typeStringFormatDateTime, typeStringFormatDate, typeStringFormatByte, typeStringFormatBinary, typeBoolean);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SampleDataTypes {\n");
    
    sb.append("    typeNumberFormatNone: ").append(toIndentedString(typeNumberFormatNone)).append("\n");
    sb.append("    typeNumberFormatFloat: ").append(toIndentedString(typeNumberFormatFloat)).append("\n");
    sb.append("    typeNumberFormatDouble: ").append(toIndentedString(typeNumberFormatDouble)).append("\n");
    sb.append("    typeIntegerFormatNone: ").append(toIndentedString(typeIntegerFormatNone)).append("\n");
    sb.append("    typeIntegerFormatInt32: ").append(toIndentedString(typeIntegerFormatInt32)).append("\n");
    sb.append("    typeIntegerFormatInt64: ").append(toIndentedString(typeIntegerFormatInt64)).append("\n");
    sb.append("    typeStringFormatDateTime: ").append(toIndentedString(typeStringFormatDateTime)).append("\n");
    sb.append("    typeStringFormatDate: ").append(toIndentedString(typeStringFormatDate)).append("\n");
    sb.append("    typeStringFormatByte: ").append(toIndentedString(typeStringFormatByte)).append("\n");
    sb.append("    typeStringFormatBinary: ").append(toIndentedString(typeStringFormatBinary)).append("\n");
    sb.append("    typeBoolean: ").append(toIndentedString(typeBoolean)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

